@model TEB.Core.ViewModel.ProductSearchViewModel
@using TEB.Core.Enumerations;
@using TEB.Core.Helpers;

@{
    ViewBag.Title = "Products";
    //var defaultGridPageSize = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().DefaultGridPageSize;
    //var gridPageSizes = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().GridPageSizes;

    var defaultGridPageSize = 10;
    var gridPageSizes = 10;
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="content-header clearfix">
        <h1 class="pull-left">
            Products
        </h1>
        <div class="pull-right">
            <a href="@Url.Action("Create")" class="btn bg-blue">
                <i class="fa fa-plus-square"></i>
                Add new
            </a>
            <button type="submit" name="download-catalog-pdf" class="btn bg-purple">
                <i class="fa fa-file-pdf-o"></i>
                Download catalog as PDF
            </button>
            <div class="btn-group">
                <button type="button" class="btn btn-success">
                    <i class="fa fa-download"></i>
                    Export
                </button>
                <button type="button" class="btn btn-success dropdown-toggle" data-toggle="dropdown" aria-expanded="false">
                    <span class="caret"></span>
                    <span class="sr-only">&nbsp;</span>
                </button>
                <ul class="dropdown-menu" role="menu">
                    <li>
                        <button type="submit" name="exportxml-all">
                            <i class="fa fa-file-code-o"></i>
                            Export to XML (all found)
                        </button>
                    </li>
                    <li>
                        <button type="button" id="exportxml-selected">
                            <i class="fa fa-file-code-o"></i>
                            Export to XML (selected)
                        </button>
                    </li>
                    <li class="divider"></li>
                    <li>
                        <button type="submit" name="exportexcel-all">
                            <i class="fa fa-file-excel-o"></i>
                            Export to Excel (all found)
                        </button>
                    </li>
                    <li>
                        <button type="button" id="exportexcel-selected">
                            <i class="fa fa-file-excel-o"></i>
                            Export to Excel (selected)
                        </button>
                    </li>
                </ul>
            </div>
            @if (!Model.IsLoggedInAsVendor || Model.AllowVendorsToImportProducts)
            {
                //a vendor cannot import products
                <button type="button" name="importexcel" class="btn bg-olive" data-toggle="modal" data-target="#importexcel-window">
                    <i class="fa fa-upload"></i>
                    Import
                </button>
            }
            <button type="button" id="delete-selected" class="btn bg-red">
                <i class="fa fa-trash-o"></i>
                Delete (selected)
            </button>
        </div>
    </div>

    <div class="content">
        <div class="form-horizontal">
            <div class="panel-group">
                <div class="panel panel-default panel-search">
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-md-5">
                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.LabelFor(model => model.SearchProductName)
                                    </div>
                                    <div class="col-md-8">
                                        @Html.EditorFor(model => model.SearchProductName)
                                    </div>
                                </div>
                                <div class="form-group" @(Model.AvailableCategories.SelectionIsNotPossible() ? Html.Raw("style=\"display:none\"") : null)>
                                    <div class="col-md-4">
                                        @Html.LabelFor(model => model.SearchCategoryId)
                                    </div>
                                    <div class="col-md-8">
                                        @Html.DropDownList("SearchCategoryId", Model.AvailableCategories)
                                    </div>
                                </div>
                                <div class="form-group" @(Model.AvailableCategories.SelectionIsNotPossible() ? Html.Raw("style=\"display:none\"") : null)>
                                    <div class="col-md-4">
                                        @Html.LabelFor(model => model.SearchIncludeSubCategories)
                                    </div>
                                    <div class="col-md-8">
                                        @Html.EditorFor(model => model.SearchIncludeSubCategories)
                                    </div>
                                </div>
                                <div class="form-group" @(Model.AvailableManufacturers.SelectionIsNotPossible() ? Html.Raw("style=\"display:none\"") : null)>
                                    <div class="col-md-4">
                                        @Html.LabelFor(model => model.SearchManufacturerId)
                                    </div>
                                    <div class="col-md-8">
                                        @Html.DropDownList("SearchManufacturerId", Model.AvailableManufacturers)
                                    </div>
                                </div>
                                <div class="form-group" @(Model.AvailableVendors.SelectionIsNotPossible() || Model.IsLoggedInAsVendor ? Html.Raw("style='display: none;'") : null)>
                                    <div class="col-md-4">
                                        @Html.LabelFor(model => model.SearchVendorId)
                                    </div>
                                    <div class="col-md-8">
                                        @Html.DropDownList("SearchVendorId", Model.AvailableVendors)
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-7">
                                <div class="form-group" @(Model.AvailableStores.SelectionIsNotPossible() ? Html.Raw("style=\"display:none\"") : null)>
                                    <div class="col-md-4">
                                        @Html.LabelFor(model => model.SearchStoreId)
                                    </div>
                                    <div class="col-md-8">
                                        @Html.DropDownList("SearchStoreId", Model.AvailableStores)
                                    </div>
                                </div>
                                <div class="form-group" @(Model.AvailableWarehouses.SelectionIsNotPossible() ? Html.Raw("style=\"display:none\"") : null)>
                                    <div class="col-md-4">
                                        @Html.LabelFor(model => model.SearchWarehouseId)
                                    </div>
                                    <div class="col-md-8">
                                        @Html.DropDownList("SearchWarehouseId", Model.AvailableWarehouses)
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.LabelFor(model => model.SearchProductTypeId)
                                    </div>
                                    <div class="col-md-8">
                                        @Html.DropDownList("SearchProductTypeId", Model.AvailableProductTypes)
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.LabelFor(model => model.SearchPublishedId)
                                    </div>
                                    <div class="col-md-8">
                                        @Html.DropDownList("SearchPublishedId", Model.AvailablePublishedOptions)
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-md-4">
                                        @Html.LabelFor(model => model.GoDirectlyToSku)
                                    </div>
                                    <div class="col-md-8">
                                        <div class="input-group input-group-short">
                                            @Html.EditorFor(model => model.GoDirectlyToSku)
                                            <span class="input-group-btn">
                                                <button type="submit" id="go-to-product-by-sku" name="go-to-product-by-sku" class="btn btn-info btn-flat">
                                                    Go
                                                </button>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-7 col-md-offset-5">
                                <button type="button" id="search-products" class="btn btn-primary btn-search">
                                    <i class="fa fa-search"></i>
                                    Search
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <script src="https://kendo.cdn.telerik.com/2017.3.913/js/kendo.all.min.js"></script>

                <div class="panel panel-default">
                    <div class="panel-body">
                        <div id="products-grid"></div>

                        <script>
                            $(document).ready(function() {
                                $("#products-grid").kendoGrid({
                                    dataSource: {
                                        type: "json",
                                        transport: {
                                            read: {
                                                url: "@Html.Raw(Url.Action("ProductList", "Product"))",
                                                type: "POST",
                                                dataType: "json",
                                                //data: additionalData
                                            }
                                        },
                                        schema: {
                                            data: "Data",
                                            total: "Total",
                                            errors: "Errors"
                                        },
                                        error: function(e) {
                                            //display_kendoui_grid_error(e);
                                            // Cancel the changes
                                            this.cancelChanges();
                                        },
                                        pageSize: @(defaultGridPageSize),
                                        serverPaging: true,
                                        serverFiltering: true,
                                        serverSorting: true
                                    },
                                    pageable: {
                                        refresh: true,
                                        pageSizes: [@(gridPageSizes)],
                                        messages: {
                                            display: "{0} - {1} of {2} items",
                                            empty: "No items to display",
                                            page: "Page",
                                            of: "of {0}",
                                            itemsPerPage: "items per page",
                                            first: "Go to the first page",
                                            previous: "Go to the previous page",
                                            next: "Go to the next page",
                                            last: "Go to the last page",
                                            refresh: "Refresh",
                                            allPages: "All",
                                            morePages: "More pages"
                                        }
                                    },
                                    editable: {
                                        confirmation: "Are you sure you want to delete this item?",
                                        mode: "inline"
                                    },
                                    scrollable: false,
                                    dataBound: onDataBound,
                                    columns: [
                                        {
                                            field: "Id",
                                            headerTemplate: "<input id='mastercheckbox' type='checkbox'/>",
                                            headerAttributes: { style: "text-align:center" },
                                            attributes: { style: "text-align:center" },
                                            template: "<input type='checkbox' value='#=Id#' class='checkboxGroups'/>",
                                            width: 50
                                        },
                                        {
                                            field: "PictureThumbnailUrl",
                                            title: "Picture",
                                            template: '<img src="#=PictureThumbnailUrl#" />',
                                            width: 100
                                        },
                                        {
                                            field: "Name",
                                            title: "Product name",
                                            width: 300
                                        }, {
                                            field: "Sku",
                                            title: "SKU",
                                            width: 100
                                        }, {
                                            field: "Price",
                                            title: "Price",
                                            width: 150,
                                            //if not a grouped product, then display
                                            template: "# if(ProductTypeId != @((int) ProductType.GroupedProduct)) {# #:Price# #}  #"
                                        }, {
                                            field: "StockQuantityStr",
                                            title: "Stock quantity",
                                            width: 100
                                        }, {
                                            field: "ProductTypeName",
                                            title: "Product type",
                                            width: 100
                                        }, {
                                            field: "Published",
                                            title: "Published",
                                            width: 100,
                                            template: '# if(Published) {# <i class="fa fa-check true-icon"></i> #} else {# <i class="fa fa-close false-icon"></i> #} #'
                                        }, {
                                            field: "Id",
                                            title: "Edit",
                                            width: 100,
                                            headerAttributes: { style: "text-align:center" },
                                            attributes: { style: "text-align:center" },
                                            template: '<a class="btn btn-default" href="product/Edit/#=Id#"><i class="fa fa-pencil"></i>Edit</a>'
                                        }
                                    ]
                                });
                            });
                        </script>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script type="text/javascript">
                var selectedIds = [];

                $(document).ready(function () {
                    //search button
                    $('#search-products').click(function () {
                        //search
                        var grid = $('#products-grid').data('kendoGrid');
                        grid.dataSource.page(1); //new search. Set page size to 1
                        //grid.dataSource.read(); we already loaded the grid above using "page" function
                        //clear selected checkboxes
                        $('.checkboxGroups').attr('checked', false).change();
                        selectedIds = [];
                        return false;
                    });

                    $("#@Html.FieldIdFor(model => model.SearchProductName)").keydown(function (event) {
                        if (event.keyCode === 13) {
                            $("#search-products").click();
                            return false;
                        }
                    });

                    $("#@Html.FieldIdFor(model => model.GoDirectlyToSku)").keydown(function (event) {
                        if (event.keyCode === 13) {
                            $("#go-to-product-by-sku").click();
                            return false;
                        }
                    });
                    //delete selected
                    $('#delete-selected').click(function(e) {
                        e.preventDefault();

                        var postData = {
                            selectedIds: selectedIds
                        };
                        addAntiForgeryToken(postData);

                        $.ajax({
                            cache: false,
                            type: "POST",
                            url: "@(Url.Action("DeleteSelected", "Product"))",
                            data: postData,
                            complete: function(data) {
                                //reload grid
                                var grid = $('#products-grid').data('kendoGrid');
                                grid.dataSource.read();
                            },
                            error: function(xhr, ajaxOptions, thrownError) {
                                alert(thrownError);
                            },
                            traditional: true
                        });
                        return false;
                    });

                    $('#mastercheckbox').click(function () {
                        $('.checkboxGroups').attr('checked', $(this).is(':checked')).change();
                    });

                    //wire up checkboxes.
                    $('#products-grid').on('change', 'input[type=checkbox][id!=mastercheckbox][class=checkboxGroups]', function (e) {
                        var $check = $(this);
                        if ($check.is(":checked") == true) {
                            var checked = jQuery.inArray($check.val(), selectedIds);
                            if (checked == -1) {
                                //add id to selectedIds.
                                selectedIds.push($check.val());
                            }
                        }
                        else {
                            var checked = jQuery.inArray($check.val(), selectedIds);
                            if (checked > -1) {
                                //remove id from selectedIds.
                                selectedIds = $.grep(selectedIds, function (item, index) {
                                    return item != $check.val();
                                });
                            }
                        }
                        updateMasterCheckbox();
                    });
                });

                function additionalData() {
                    var data = {
                        SearchProductName: $('#@Html.FieldIdFor(model => model.SearchProductName)').val(),
                        SearchCategoryId: $('#SearchCategoryId').val(),
                        SearchIncludeSubCategories: $('#@Html.FieldIdFor(model => model.SearchIncludeSubCategories)').is(':checked'),
                        SearchManufacturerId: $('#SearchManufacturerId').val(),
                        SearchStoreId: $('#SearchStoreId').val(),
                        SearchWarehouseId: $('#SearchWarehouseId').val(),
                        SearchVendorId: $('#SearchVendorId').val(),
                        SearchProductTypeId: $('#SearchProductTypeId').val(),
                        SearchPublishedId: $('#SearchPublishedId').val()
                    };
                    addAntiForgeryToken(data);
                    return data;
                }

                function onDataBound(e) {
                    $('#products-grid input[type=checkbox][id!=mastercheckbox][class=checkboxGroups]').each(function () {
                        var currentId = $(this).val();
                        var checked = jQuery.inArray(currentId, selectedIds);
                        //set checked based on if current checkbox's value is in selectedIds.
                        $(this).attr('checked', checked > -1);
                    });

                    updateMasterCheckbox();
                }

                function updateMasterCheckbox() {
                    var numChkBoxes = $('#products-grid input[type=checkbox][id!=mastercheckbox][class=checkboxGroups]').length;
                    var numChkBoxesChecked = $('#products-grid input[type=checkbox][id!=mastercheckbox][class=checkboxGroups]:checked').length;
                    $('#mastercheckbox').attr('checked', numChkBoxes == numChkBoxesChecked && numChkBoxes > 0);
                }
    </script>
}

